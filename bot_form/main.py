'''
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç: –ê–Ω–∫–µ—Ç–∞ (Quiz) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–í –¥–∞–Ω–Ω–æ–º "–∫–≤–∏–∑–µ" –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è —Ñ–∏–∑–∏–∫–∏ 7 –∫–ª–∞—Å—Å–∞
'''

import telebot
from telebot import types
API_TOKEN = '6408579321:AAFCNEkjbsIydN-hbncO_GJw3CSTIs9fmxU'

bot = telebot.TeleBot(API_TOKEN)

questions = {
    "1": {
        "question": "–í —á–µ–º –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –¥–ª–∏–Ω–∞?",
        "answer": {
            "1": "–≤ –º–µ—Ç—Ä–∞—Ö",
            "2": "–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö",
            "3": "–≤ –º–æ–ª—è—Ö"
        }
    },
    "2": {
       "question": "–ö–∞–∫–æ–π —Ñ–æ—Ä–º—É–ª–æ–π –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ?",
        "answer": {
            "1": "S = v * t",
            "2": "D = S * v",
            "3": "–¢–∞–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        }
    },
    "3": {
        "question": "–ß–µ–º—É —Ä–∞–≤–Ω–æ  —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è?",
        "answer": {
            "1": "g = 9,806 65 –º/—Å2",
            "2": "g = 1",
            "3": "g = 3.14"
        }
    }
}

is_continue = False

# Handle '/start' and '/help'
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à '–∫–≤–∏–∑' –ø–æ —Ñ–∏–∑–∏–∫–µ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∑–∞ 7-–æ–π –∫–ª–∞—Å—Åüòâ –î–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏ /help –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏ /test")

@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.reply_to(message, """\
–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:
—Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ 3 –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.
–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Ç—ã —É–∑–Ω–∞–µ—à—å —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É.
""")

@bot.message_handler(commands=['test'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup(row_width=3)
    btn_1 = types.InlineKeyboardButton(text=questions["1"]["answer"]["1"], callback_data="btn1")
    btn_2 = types.InlineKeyboardButton(text=questions["1"]["answer"]["2"], callback_data="btn2")
    btn_3 = types.InlineKeyboardButton(text=questions["1"]["answer"]["3"], callback_data="btn3")
    markup.add(btn_1, btn_2, btn_3)
    bot.send_message(message.chat.id, questions["1"]["question"], reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == "btn1":
        bot.send_message(call.message.chat.id, "–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
        global is_continue
        is_continue = True
    elif call.data == "btn2":
         bot.send_message(call.message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    elif call.data == "btn3":
         bot.send_message(call.message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")



#    markup = types.InlineKeyboardMarkup(row_width=3)
#    btn_1 = types.InlineKeyboardButton(text=questions["2"]["answer"]["1"], callback_data="btn21")
#    btn_2 = types.InlineKeyboardButton(text=questions["2"]["answer"]["2"], callback_data="btn22")
#    btn_3 = types.InlineKeyboardButton(text=questions["2"]["answer"]["3"], callback_data="btn23")
#    markup.add(btn_1, btn_2, btn_3)
#    bot.send_message(message.chat.id, questions["2"]["question"], reply_markup=markup)


if __name__=="__main__":
    bot.infinity_polling(none_stop=True)
